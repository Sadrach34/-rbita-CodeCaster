#!/usr/bin/env python3
"""
Script principal para ejecutar todos los an√°lisis del proyecto Orbita-CodeCaster.

Este script ejecuta:
1. An√°lisis de mosquitos
2. An√°lisis de cobertura del suelo
3. Modelo predictivo con Machine Learning
4. Generaci√≥n de mapas interactivos

Uso: python scripts/analisis_completo.py
"""
import sys
from pathlib import Path

# A√±adir directorio src al path
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.utils.data_loader import DataLoader
from src.analisis_mosquitos import AnalizadorMosquitos
from src.analisis_cobertura import AnalizadorCobertura
from src.prediccion import PredictorMosquitos
import time


def print_banner():
    """Imprime el banner del proyecto."""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                                ‚ïë
    ‚ïë        üåç  ORBITA-CODECASTER - AN√ÅLISIS COMPLETO  ü¶ü          ‚ïë
    ‚ïë                                                                ‚ïë
    ‚ïë   An√°lisis Geoespacial de Floraciones y H√°bitats de Mosquitos ‚ïë
    ‚ïë                                                                ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)


def print_section(title):
    """Imprime un separador de secci√≥n."""
    print("\n" + "=" * 70)
    print(f"  {title}")
    print("=" * 70 + "\n")


def main():
    """Funci√≥n principal del script."""
    start_time = time.time()
    
    print_banner()
    
    try:
        # =============================================
        # 1. CARGA DE DATOS
        # =============================================
        print_section("üìÇ FASE 1: CARGA DE DATOS")
        
        loader = DataLoader(data_dir="data/raw")
        loader.cargar_todos()
        loader.resumen_datos()
        
        # =============================================
        # 2. AN√ÅLISIS DE MOSQUITOS
        # =============================================
        print_section("ü¶ü FASE 2: AN√ÅLISIS DE MOSQUITOS")
        
        print("Ejecutando an√°lisis de mosquitos...")
        analizador_mosquitos = AnalizadorMosquitos(loader.get_mosquitos())
        resultados_mosquitos = analizador_mosquitos.ejecutar_analisis_completo()
        
        # =============================================
        # 3. AN√ÅLISIS DE COBERTURA DEL SUELO
        # =============================================
        print_section("üåç FASE 3: AN√ÅLISIS DE COBERTURA DEL SUELO")
        
        print("Ejecutando an√°lisis de cobertura del suelo...")
        analizador_cobertura = AnalizadorCobertura(loader.get_imagery())
        resultados_cobertura = analizador_cobertura.ejecutar_analisis_completo()
        
        # =============================================
        # 4. MODELO PREDICTIVO
        # =============================================
        print_section("ü§ñ FASE 4: MODELO PREDICTIVO")
        
        print("Entrenando modelo predictivo con Machine Learning...")
        predictor = PredictorMosquitos(loader.get_imagery())
        resultados_prediccion = predictor.ejecutar_analisis_completo()
        
        # =============================================
        # 5. RELACI√ìN ENTRE DATASETS
        # =============================================
        print_section("üîó FASE 5: AN√ÅLISIS DE RELACIONES")
        
        print("Analizando relaci√≥n entre mosquitos y cobertura del suelo...")
        analizar_relaciones(loader.get_mosquitos(), loader.get_imagery())
        
        # =============================================
        # RESUMEN FINAL
        # =============================================
        elapsed_time = time.time() - start_time
        
        print_section(" AN√ÅLISIS COMPLETO FINALIZADO")
        
        print(f"‚è±Ô∏è  Tiempo total de ejecuci√≥n: {elapsed_time:.2f} segundos\n")
        
        print("üìä RESUMEN DE RESULTADOS:")
        print(f"   ‚Ä¢ {len(loader.get_mosquitos())} reportes de mosquitos analizados")
        print(f"   ‚Ä¢ {len(loader.get_imagery())} observaciones de cobertura analizadas")
        print(f"   ‚Ä¢ Modelo predictivo entrenado con {resultados_prediccion.get('test_score', 0):.2%} de precisi√≥n")
        
        print("\nüìÅ ARCHIVOS GENERADOS:")
        print("   Todos los resultados se encuentran en la carpeta 'data/output/':")
        print("   ‚Ä¢ Gr√°ficos estad√≠sticos (.png)")
        print("   ‚Ä¢ Mapas interactivos (.html)")
        print("   ‚Ä¢ M√©tricas del modelo predictivo")
        
        print("\nüéâ ¬°An√°lisis completado exitosamente!")
        print("   Abre los archivos HTML en tu navegador para explorar los mapas.\n")
        
    except FileNotFoundError as e:
        print(f"\n‚ùå ERROR: No se encontr√≥ un archivo necesario")
        print(f"   Detalles: {e}")
        print(f"\nüí° Aseg√∫rate de tener los archivos CSV en 'data/raw/'")
        sys.exit(1)
        
    except Exception as e:
        print(f"\n‚ùå ERROR INESPERADO: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


def analizar_relaciones(df_mosquitos, df_imagery):
    """
    Analiza la relaci√≥n entre reportes de mosquitos y cobertura del suelo.
    
    Args:
        df_mosquitos: DataFrame de mosquitos
        df_imagery: DataFrame de imagery
    """
    print("\nüîç Analizando relaciones entre datasets...")
    
    # √Åreas con agua
    col_agua = 'ceoWaterLakePondedContainer'
    if col_agua in df_imagery.columns:
        areas_con_agua = df_imagery[df_imagery[col_agua] > 0]
        print(f"\nüíß √Åreas con cuerpos de agua: {len(areas_con_agua)}")
        print(f"   ({len(areas_con_agua)/len(df_imagery)*100:.1f}% del total)")
    
    # Reportes de mosquitos
    print(f"\nü¶ü Total de reportes de mosquitos: {len(df_mosquitos)}")
    
    # An√°lisis temporal
    if 'mes' in df_mosquitos.columns:
        meses_pico = df_mosquitos['mes'].value_counts().head(3)
        print(f"\nüìÖ Meses con m√°s reportes:")
        meses_nombres = {1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril', 
                        5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',
                        9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'}
        for mes, cantidad in meses_pico.items():
            nombre_mes = meses_nombres.get(mes, f'Mes {mes}')
            print(f"   ‚Ä¢ {nombre_mes}: {cantidad} reportes")
    
    # Correlaci√≥n conceptual
    print(f"\nüí° INSIGHTS:")
    print(f"   ‚Ä¢ Las √°reas con agua son h√°bitats potenciales para mosquitos")
    print(f"   ‚Ä¢ La vegetaci√≥n puede proporcionar refugio y sombra")
    print(f"   ‚Ä¢ Las superficies impermeables pueden crear charcos de agua estancada")
    
    print("\n An√°lisis de relaciones completado\n")


if __name__ == "__main__":
    main()
